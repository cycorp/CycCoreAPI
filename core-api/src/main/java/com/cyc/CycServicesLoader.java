package com.cyc;

/*
 * #%L
 * File: CycServicesLoader.java
 * Project: Core API
 * %%
 * Copyright (C) 2015 - 2017 Cycorp, Inc
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.ServiceLoader;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This class is solely responsible for loading Cyc API services, such as
 * {@link com.cyc.kb.spi.KbApiService}.
 * 
 * <p>Note that the relevant service provider file in META-INF/services should be generated by the 
 * serviceloader-maven-plugin, specified in the provider project's pom.xml file.
 * 
 * @author nwinant
 */
public class CycServicesLoader {
  
  //====|    Fields    |==========================================================================//
  
  private static final Logger LOG = LoggerFactory.getLogger(CycServicesLoader.class);
  
  private final Map<Class<? extends CycApiEntryPoint>, CycApiEntryPoint> entryPointServices
          = new HashMap<>();
  
  //====|    Construction    |====================================================================//
  
  protected CycServicesLoader() {
  }
  
  //====|    Protected    |=======================================================================//
  
  protected synchronized <T extends CycApiEntryPoint> T getApiEntryPoint(
          Class<T> clazz, boolean allowMissingServices) {
    if (!entryPointServices.containsKey(clazz)) {
      final CycApiEntryPoint provider = loadApiEntryPoint(clazz, allowMissingServices);
      entryPointServices.put(clazz, provider);
    }
    return (T) entryPointServices.get(clazz);
  }
  
  private <T extends CycApiEntryPoint> T loadApiEntryPoint(Class<T> clazz, 
                                                           boolean allowMissingServices) {
    final List<T> providers = loadServiceProviders(clazz, allowMissingServices);
    return selectServiceProvider(providers, clazz);
  }
  
  protected <T> List<T> loadServiceProviders(Class<T> clazz, boolean allowMissingServices) {
    LOG.debug("Attempting to find {} service providers...", clazz.getCanonicalName());
    final List<T> results = new ArrayList();
    final String clazzName = clazz.getCanonicalName();
    final ServiceLoader<T> svcLoader = ServiceLoader.load(clazz);
    final Iterator<T> iter =  svcLoader.iterator();
    while (iter.hasNext()) {
      results.add(iter.next());
    }
    if (results.isEmpty()) {
      final String errMsg = "No providers found for " + clazzName;
      if (allowMissingServices) {
        LOG.warn(errMsg);
        return null;
      } else {
        throw new RuntimeException(errMsg);
      }
    }
    if (results.size() > 1) {
      LOG.warn("Loaded {} {} providers: {}", results.size(), clazzName, results);
    } else {
      LOG.debug("Loaded one {} provider: {}", clazzName, results.get(0));
    }
    return results;
  }
  
  protected <T> T selectServiceProvider(List<T> providers, Class<T> clazz) {
    if ((providers == null) || providers.isEmpty()) {
      return null;
    }
    if (providers.size() > 1) {
      throw new RuntimeException("Expected exactly one provider for " + clazz.getCanonicalName() 
              + " but found " + providers.size() + ": " + providers);
    }
    return providers.get(0);
  }
  
}
